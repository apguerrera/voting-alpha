#!/usr/bin/env python3

import sys, os, json, logging, subprocess
import time
import urllib.parse

logging.basicConfig(level=logging.INFO)

from time import sleep
from contextlib import suppress
from collections import defaultdict

import boto3
from boto3.s3.transfer import S3Transfer

import click

S3_DEV_BUCKET = "flux-scratch"
STACK_TMPL = "./stack/flux-securevote-voting-stack.yaml"

def must_run(cmd, silent=False):
    logging.info("Running `%s`" % cmd)
    out = subprocess.STDOUT
    err = None
    if silent:
        out = subprocess.DEVNULL
        err = out
    exit_code = subprocess.check_call(cmd.split(' '), stdout=out, stderr=err)
    logging.debug("Command `%s` exited w code %d" % (cmd, exit_code))
    if exit_code != 0:
        logging.error("Failed to run %s" % cmd)
        raise Exception("Failed to run required cmd: %s" % cmd)


class CmdRunner:
    def __init__(self, cmd_runner=must_run):
        self.cmds = []
        self.cmd_runner = cmd_runner

    def add(self, name, cmd):
        self.cmds.append((name, cmd))

    def run(self, cmd_runner=None):
        cmd_runner = self.cmd_runner if cmd_runner is None else cmd_runner
        for (n, cmd) in self.cmds:
            logging.info("Running ({name}) as cmd:\n\t{cmd}\n".format(name=n, cmd=cmd))
            cmd_runner(cmd)


def print_output(msg):
    print("\n### RESULT ###\n\n{}".format(msg))


@click.group()
@click.option("--debug/--no-debug", default=False)
def cli(debug):
    if debug:
        logging.basicConfig(level=logging.DEBUG)
        logging.debug("Debug mode enabled")


@cli.command(name='test-deploy')
# @click.argument('pkgs', nargs=-1)
@click.argument('stack-name', type=click.STRING, default="test-voting-stack")
@click.option("--deploy/--no-deploy", default=False)
@click.option("--open-browser/--no-open-browser", default=False)
@click.option("--del-packaged-tmpl/--no-del-packaged-tmpl", default=True)
@click.pass_context
def test_stack(ctx, stack_name, deploy, open_browser, del_packaged_tmpl):
    TMP_TMPL_FILE = 'tmp-stack.yaml'
    obj_key = "templates/" + STACK_TMPL.split('/')[-1]
    must_run("aws cloudformation package --template-file {} --s3-bucket {} --output-template-file {}".format(STACK_TMPL, S3_DEV_BUCKET, TMP_TMPL_FILE), silent=True)
    s3 = boto3.client('s3')
    s3_tfer = S3Transfer(s3)
    s3_tfer.upload_file(TMP_TMPL_FILE, S3_DEV_BUCKET, obj_key, extra_args={'ACL': 'public-read'})
    if del_packaged_tmpl:
        os.system("rm {}".format(TMP_TMPL_FILE))
    obj_url = "{}/{}/{}".format(s3.meta.endpoint_url, S3_DEV_BUCKET, obj_key)

    params = {
        'NamePrefix': 'testnet',
        'HostedZone': 'Z2NVOFJHPZ9S2O',
        'EC2InstanceType': 't3.micro',
        'NumberOfEthereumConsensusNodes': '1',
        'NumberOfEthereumPublicNodes': '1',
        'Subdomain': 'testnet',
        'SSHKey': 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDCr1lcY0jTSmCARinvFJHelYGx2p+Ky0YxskSVj53ywYaLRN96w8WdN7rpCCosDQbd9KzvmKbBHHAlL8noEtARmxP4tKRvGGRyKawLLPm530CJRv4bSz03Iw2kz2V2fUWjA/RO2gNK9DCXTdDM67avv8oB/QvSobm1rSNKj6CcjTTJuQxGhJcXKrU/BZwugMIM3ELByyD6w8Jizm12JWGVgJTEIkgqgaNhmek2OLsw8+1hIC9EfhQunH9izzhEd2HoGYf3IJXlESnuRyhb7uOvOPysQDL8Hrt/Po6Wi3Lhlczy7q6wrlGQwO5/ORAfpYXGuk1lc3mTI/srgSgc38Vt',
        'AdminEmail': 'test-stack-flux-vote@xk.io',
    }
    params_aws = [{'ParameterKey': k, 'ParameterValue': v} for k,v in params.items()]

    cfn = boto3.client('cloudformation')

    def await_in_prog():
        def is_in_prog():
            s = get_stack()
            return s and 'IN_PROGRESS' in s['StackStatus']
        while is_in_prog():
            time.sleep(0.1)

    def stack_exists():
        s = get_stack()
        return s and s['StackStatus'] != 'DELETE_COMPLETE'

    def get_stack():
        ss = list(filter(lambda s: s['StackName'] == stack_name, cfn.list_stacks()['StackSummaries']))
        if len(ss) > 0:
            return ss[0]
        return None

    def delete_stack():
        r = cfn.delete_stack(StackName=stack_name)
        while stack_exists():
            time.sleep(0.1)
        return r

    def stack_del_if_necessary():
        if get_stack()['StackStatus'] == 'ROLLBACK_COMPLETE':
            logging.warning("Deleting {} as it's in ROLLBACK_COMPLETE".format(stack_name))
            delete_stack()

    def create_stack():
        r = cfn.create_stack(
            StackName=stack_name,
            TemplateURL=obj_url,
            Parameters=params_aws,
            Capabilities=['CAPABILITY_NAMED_IAM', 'CAPABILITY_AUTO_EXPAND'],
            OnFailure="DELETE",
            TimeoutInMinutes=3
        )
        return r['StackId']

    def update_stack():
        r = cfn.update_stack(
            StackName=stack_name,
            TemplateURL=obj_url,
            Parameters=params_aws,
            Capabilities=['CAPABILITY_NAMED_IAM', 'CAPABILITY_AUTO_EXPAND'],
        )
        return r['StackId']

    if deploy:
        await_in_prog()
        stack_del_if_necessary()
        if stack_exists():
            sid = update_stack()
        else:
            sid = create_stack()
        s = get_stack()
        cfn_url = "https://ap-southeast-2.console.aws.amazon.com/cloudformation/home?region=ap-southeast-2#/stacks/{}/events".format(urllib.parse.quote(sid, safe=''))
        open_cmd = "explorer.exe \"{}\"".format(cfn_url)
        if open_browser:
            os.system(open_cmd)
        print_output("Initiated deploy of {}\n\nLink: {}".format(sid, cfn_url))

    else:
        cfn_url = "https://console.aws.amazon.com/cloudformation/home?region={region}#/stacks/new?stackName={stack_name}&templateURL={tmpl_url}".format(obj_url, region=s3.meta.region_name, stack_name=stack_name, tmpl_url=urllib.parse.quote(obj_url, safe=''))
        open_cfn_url_cmd = "explorer.exe \"{}\"".format(cfn_url)
        if open_browser:
            print("Opening CFN template via console. CMD: {}".format(open_cfn_url_cmd))
            os.system(open_cfn_url_cmd)
        print_output("""Uploaded {}
        Launch via CloudFormation: {}""".format(obj_url, cfn_url))


# monkey patch so usage output looks nicer
sys.argv[0] = './manage'
cli()
