AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  pNamePrefix:
    Type: String

  pMembershipContract:
    Type: String

  pApiDomainRaw:
    Type: String

  pEthHost:
    Type: String

  pCertArn:
    Type: String
    
  pApiDomain:
    Type: String

  pApiStageName:
    Type: String
    Default: svprod

  pLambdaLayer:
    Type: String
    


Globals:
  Function:
    Runtime: python3.6
    Timeout: 180
    Environment:
      Variables:
        pMembershipContract: !Ref pMembershipContract

  Api:
    EndpointConfiguration: REGIONAL
    Cors: !Sub "'*.${pApiDomainRaw}'"


Resources:

  # Simple DB for logging
  rAdminAddMemberDB:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub ${pNamePrefix}-admin-add-member-db
      PrimaryKey:
        Name: id
        Type: String
      SSESpecification:
        SSEEnabled: true

  rMembersLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${pNamePrefix}-members-layer
      Description: SV membership management python libs
      ContentUri: ../app/members/deps
      CompatibleRuntimes:
        - python3.6
      RetentionPolicy: Delete

  rCommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${pNamePrefix}-common-layer
      Description: SV app lambda common python libs
      ContentUri: ../app/common
      CompatibleRuntimes:
        - python3.6
      RetentionPolicy: Delete


  # an admin (service/bot/etc) uses an API key to register a voter's address, weighting, active period, 
  # and logs any arbitrary data needed for later audit
  rAdminAddMember:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${pNamePrefix}-admin-add-member
      CodeUri: ../app/members
      Environment:
        Variables:
          ENV_VAR_TEST: 'uri://test-value'
      Handler: api.onboard_handler
      Runtime: python3.6
      Layers:
        - !Ref pLambdaLayer
#        - !Ref rMembersLayer
#        - !Ref rCommonLayer
      Events:
        web:
          Type: Api
          Properties:
            Path: /admin/add
            Method: post
            RestApiId: !Ref rMembersOnboardApi


  rMembersOnboardApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${pNamePrefix}-members-onboard-api
      StageName: !Ref pApiStageName


  rMembersBasePath:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - rMembersOnboardApiStage  # created via SAM transform
    Properties:
      BasePath: members
      DomainName: !Ref pApiDomain
      Stage: !Ref pApiStageName
      RestApiId: !Ref rMembersOnboardApi


Outputs:
#  oMembersLayer:
#    Value: !Ref rMembersLayer
  oAdminAddMemberFunction:
    Value: !Ref rAdminAddMember
  oMembersOnboardApi:
    Value: !Ref rMembersOnboardApi
