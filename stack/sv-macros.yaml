AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  pLambdaLayer:
    Type: String
    Default: ''

Conditions:
  cDeployLayer: !Equals [!Ref pLambdaLayer, '']

Resources:
  rLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Condition: cDeployLayer
    Properties:
      ContentUri: ./cr/common
      Description: layer for all/common deps for custom resources / lambdas
      LayerName: sv-macros-common-layer

  rEipMacro:
    Type: AWS::CloudFormation::Macro
    Properties:
      Name: sv-eips
      FunctionName: !GetAtt rEipLamdba.Arn
      LogGroupName: /macro/SvEips
      LogRoleARN: !GetAtt rMacroExeLogRole.Arn

  rEipLamdba:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: './cr/params'
      Runtime: python3.7
      Handler: 'macro-eips.macro'
      FunctionName: !Sub sv-macro-eips
      Timeout: 30
      Layers: [ !If [ cDeployLayer, !Ref rLambdaLayer, !Ref pLambdaLayer ] ]

  rMacroExeLogRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sv-macro-lambda-exe-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /macro-role/
      Policies:
        - PolicyName: !Sub sv-macro-lambda-exe-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['logs:*']
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/macro/*'
