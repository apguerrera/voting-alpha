---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  This is a one-click secure(ish) voting stack. This template will deploy
  an Ethereum POA network on Amazon EC2 instances pre-loaded with voting smart
  contracts, along with websites and resources needed for voters to participate.
  You're able to integrate this with any membership database provided you're
  able to call an HTTPS endpoint.

  It also includes the Ethereum Network Stats and Ethereum Explorer services.

  Based on a heavily modified version of Amazon's blockchain templates.
  License: Apache 2.0 (Please do not remove) Apr 4, 2018 (bt-f5kb4kx9v)


# TODO: EC2 keypair, security group, instance profile?, vpc, subnets, domains


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network parameters
        Parameters:
          - NamePrefix
          - BlockGasLimit
          - NumberOfEthereumConsensusNodes
          - NumberOfEthereumPublicNodes

      - Label:
          default: Platform/EC2 configuration
        Parameters:
          - EC2InstanceType
          - SSHKey
          - SSHEncryptionPassword
      
      - Label:
          default: Domain Name configuration
        Parameters:
          - HostedZone
          - Subdomain

      - Label:
          default: Administration details
        Parameters:
          - AdminEmail

    ParameterLabels:
      NamePrefix:
        default: A DNS compatible name prefix to use in the names of resources (e.g. fluxvote-testnet)
      NumberOfEthereumConsensusNodes:
        default: Number of Ethereum Consensus nodes (not remotely accessable)
      NumberOfEthereumPublicNodes:
        default: Number of Ethereum public nodes (for accessing blockchain data)
      BlockGasLimit:
        default: Approximate voting capacity is (BlockGasLimit / 100000) per 5 seconds, so 8 million allows for around 16 votes per second.
      SSHKey:
        default: An SSH Public key to configure the EC2 nodes with. (Leave blank to generate a new one and email to the administrator)
      SSHEncryptionPassword:
        default: Only required if an SSHKey is not provided. The password with which to encrypt the SSH key before delivery via email.
      EC2InstanceType:
        default: EC2 Instance Type
      HostedZone:
        default: The hosted zone to use for domains
      Subdomain:
        default: The subdomain to use under the hosted zone (e.g. app for all domains under *.app.my.tld if my.tld was associated with the hosted zone)
      AdminEmail:
        default: The email address of the administrator. Various configuration items will be emailed following the stack deployment. Additionally alerts from the production system will also be forwarded here.


Parameters:
  NamePrefix:
    Description: A DNS compatible name prefix to use in the names of resources (e.g. fluxvote-testnet)
    Type: String
  AdminEmail:
    Description: The email address for the administrator. Alerts and configuration items will be sent here, including SSH keys.
    Type: String
  SSHEncryptionPassword:
    Description: A password to encrypt the generated SSH key with (which is emailed to Admin). Only required if an SSHKey is not provided.
    Type: String
    Default: ''
  Nonce:
    Description: A random string used to ensure subsequent deploys can recreate custom resources appropriately. This is safe to ignore on first deploy.
    Type: String
    Default: ''

  HostedZone:
    Description: The hosted zone to use for domains
    Type: AWS::Route53::HostedZone::Id
  Subdomain:
    Description: The subdomain to use under the hosted zone (e.g. 'vote' will mean all domains are created under *.vote.my.tld if my.tld corresponds to the above the hosted zone)
    Default: "voting-app"
    Type: String

  NumberOfEthereumConsensusNodes:
    Type: Number
    Default: '2'
    MinValue: 1
    MaxValue: 20
    Description: There must be at least one Ethereum consensus node.
    ConstraintDescription: You must have at least one Ethereum consensus node.
  NumberOfEthereumPublicNodes:
    Type: Number
    Default: '2'
    MinValue: 1
    MaxValue: 20
    Description: There must be at least one Ethereum public node.
    ConstraintDescription: You must have at least one Ethereum consensus.
  BlockGasLimit:
    Type: Number
    Default: '8000000'
    Description: The limit on the total amount of gas that can be spent for transactions in a block. This is the target block gas limit for the miner, not the starting block gas limit set in the genesis block.
    MinValue: 1000000
    MaxValue: 1000000000
    ConstraintDescription: Block Gas Limit must be between 1 million and 1 billion.
  SSHKey:
    Type: 'String'  # AWS::EC2::KeyPair::KeyName
    Description: An SSH public key to configure the EC2 nodes to accept for login. If one is not provided a fresh key will be created and emailed to the administrator.
  EC2InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
    ConstraintDescription: Please choose a valid instance type.
  pAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'


Conditions:
  cHasSSHKey:
    Fn::Not: [!Equals [ !Ref SSHKey, '' ]]
  cHasSSHEncPw:
    Fn::Not: [!Equals [ !Ref SSHEncryptionPassword, '' ]]
  cShouldGenEc2SSHKey:
    Fn::And:
      - !Not [{ Condition: cHasSSHKey }]
      - { Condition: cHasSSHEncPw }


Mappings:
  RegionToResourceRegion:
    us-east-1:
      to: us-east-1
    us-east-2:
      to: us-east-2
    us-west-2:
      to: us-west-2
    us-west-1:
      to: us-west-2
    ca-central-1:
      to: us-east-1
    eu-central-1:
      to: us-east-1
    eu-west-1:
      to: us-east-1
    eu-west-2:
      to: us-east-1
    eu-west-3:
      to: us-east-1
    ap-northeast-2:
      to: us-east-1
    ap-northeast-1:
      to: us-east-1
    ap-southeast-2:
      to: us-east-1
    ap-southeast-1:
      to: us-east-1
    sa-east-1:
      to: us-east-1
    ap-south-1:
      to: us-east-1

  RegionInformationMap:
    us-east-1:
      ResourceAccountId: 354658284331
    us-east-2:
      ResourceAccountId: 763976151875
    us-west-2:
      ResourceAccountId: 712425161857

Resources:

  rStaticBucket:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: PublicRead
      BucketName: !Sub ${NamePrefix}-static-resources
      CorsConfiguration:
        CorsRules:
          - AllowedMethods: [ 'GET' ]
            AllowedOrigins: [ '*' ]
            MaxAge: 86400

  rKms:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              - kms:Decrypt
              - kms:Encrypt
            Principal:
              Service:
                - lambda.amazonaws.com
          - Effect: Allow
            Resource: '*'
            Action: kms:*
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
#            AWS:
#              - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${NamePrefix}-crypto-params-cr

  rKmsAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${NamePrefix}-general-kms-key
      TargetKeyId: !GetAtt rKms.Arn

  rPublicSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${NamePrefix}-nodes-public-sg
      GroupDescription: SG for publicly accessible EC2 nodes (Eth + IPFS)
#      VpcId: !Ref rVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8545
          ToPort: 8546
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 30303
          ToPort: 30303
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5001
          ToPort: 5001
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 4001
          ToPort: 4001
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
#      SecurityGroupEgress:
#        - IpProtocol: "-1"
#          CidrIp: 0.0.0.0/0

  rParamsCr:
    Type: Custom::Params
    Properties:
      ServiceToken: !GetAtt rParamsLambda.Arn
      NamePrefix: !Ref NamePrefix
      SSHKey: !Ref SSHKey
      ShouldGenEc2SSHKey: !If [ cShouldGenEc2SSHKey, 'true', '' ]
      StaticBucketName: !Ref rStaticBucket
      AdminEmail: !Ref AdminEmail
      NConsensusNodes: !Ref NumberOfEthereumConsensusNodes
      NPublicNodes: !Ref NumberOfEthereumPublicNodes
      SSHEncryptionPassword: !Ref SSHEncryptionPassword
      Nonce: !Ref Nonce
      BlockGasLimit: !Ref BlockGasLimit
      StackTesting: 'true'  # set to '' to disable


  rParamsLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: './cr/params'
      Runtime: python3.6
      Handler: 'index.handler'
      FunctionName: !Sub ${NamePrefix}-crypto-params-cr
      Timeout: 300
#      KmsKeyArn: !GetAtt rKmsAlias.Arn
      Policies:
        - Statement:
          -
            Effect: Allow
            Action: ssm:PutParameter
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sv-${NamePrefix}-param-*"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sv-${NamePrefix}-nodeaddr-consensus-*"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sv-${NamePrefix}-nodekey-consensus-*"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sv-${NamePrefix}-nodekey-service-*"
          -
            Effect: Allow
            Action:
              - ec2:CreateKeyPair
              - ec2:DeleteKeyPair
              - ec2:ImportKeyPair
            Resource:
              - '*'
              # It's unfortunate but we can't do resource level stuff with ec2:*KeyPair actions: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/ec2-api-permissions.html#ec2-api-unsupported-resource-permissions
              #- !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/${NamePrefix}-sv-node-ec2-ssh-key*
              #- !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/${NamePrefix}-sv-node-ec2-ssh-key
          -
            Effect: Allow
            Action:
              - ec2:DescribeKeyPairs
              - ssm:DescribeParameters
            Resource: '*'
          -
            Effect: Allow
            Action: s3:*
            Resource:
              - !GetAtt rStaticBucket.Arn
              - !Sub ${rStaticBucket.Arn}/*

#  rVpc:
#    Type: AWS::EC2::VPC
#    Properties:
#      CidrBlock: 10.13.37.0/20  # should be 10.13.32.0 -> 10.13.47.255
#      EnableDnsSupport: true
#      EnableDnsHostnames: true
#
#  rSubnet1:  # todo: more than 1 subnet / availability zone
#    Type: AWS::EC2::Subnet
#    Properties:
#      AvailabilityZone: !Sub ${AWS::Region}a
#      CidrBlock: 10.13.37.0/24
#      MapPublicIpOnLaunch: true
#      VpcId: !Ref rVpc

#  rRouteTable:
#    Type: AWS::EC2::RouteTable
#    Properties:
#      VpcId: !Ref rVpc
#
#  rNatForSubnet1:
#    Type: AWS::EC2::NatGateway
#    Properties:
#      AllocationId: !GetAtt rVpcElasticIP.AllocationId
#      SubnetId: !Ref rSubnet1
#
#  rVpcElasticIP:
#    Type: AWS::EC2::EIP
#    Properties:
#      Domain: vpc
#
#  rNatRoute:
#    Type: AWS::EC2::Route
#    DependsOn:
#      - rNatForSubnet1
#    Properties:
#      RouteTableId: !Ref rRouteTable
#      DestinationCidrBlock: 0.0.0.0/0
#      NatGatewayId: !Ref rVpc
#
#  rVpcInternetGateway:
#    Type: AWS::EC2::InternetGateway
#
#  rVpcGatewayAttachement:
#    Type: AWS::EC2::VPCGatewayAttachment
#    Properties:
#      InternetGatewayId: !Ref rVpcInternetGateway
#      VpcId: !Ref rVpc


#  # todo, use include or something to template this out
#  rEc2Node0:
#    Type: AWS::EC2::Instance
#    Properties:
#      ImageId: !Ref pAmiId
#      KeyName: !Sub ${NamePrefix}-sv-node-ec2-ssh-key
#      InstanceType: !Ref EC2InstanceType
#      SecurityGroups: [!Ref rPublicSG]
#      BlockDeviceMappings:
#        - DeviceName: /dev/sda1
#          Ebs:
#            VolumeSize: 50
#      AvailabilityZone: !Sub ${AWS::Region}a
#      EbsOptimized: true
#      InstanceInitiatedShutdownBehavior: stop
#      SubnetId: !Ref rVpc


  rPublicNodeAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
#      VPCZoneIdentifier: [!Ref rSubnet1]
      AvailabilityZones:
        - !Sub ${AWS::Region}a
        - !Sub ${AWS::Region}b
        - !Sub ${AWS::Region}c
      LaunchConfigurationName:
        Ref: rNodeLaunchConfig
      MinSize: '1'
      MaxSize:
        Ref: NumberOfEthereumPublicNodes
      DesiredCapacity:
        Ref: NumberOfEthereumPublicNodes
#      Tags:
#        - Key: Name
#          Value: !Ref InstanceNames
#          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'

  rNodeLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - rParamsCr
    Properties:
      ImageId: !Ref pAmiId
      SecurityGroups:
        - Ref: rPublicSG
      InstanceType:
        Ref: EC2InstanceType
      KeyName: !Sub ${NamePrefix}-sv-node-ec2-ssh-key
#      IamInstanceProfile:
#        Ref:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 100
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -x"
            - "\n"
            - "yum install -y aws-cfn-bootstrap"
            - "\n"
            - Fn::Join:
                - "\n"
                - - "sudo amazon-linux-extras install docker" # Install docker;; previously 'sudo yum install -y docker'
                  - "sudo service docker start" # Start docker
                  - "sudo usermod -a -G docker ec2-user" # Make it so we don't have to sudo for docker
                  # - !Sub "eval `aws ecr get-login --region ${DockerRegion} --no-include-email --registry-ids ${DockerECRAccount}`" # Log in to docker
                  - "mkdir /parityVolume"
                  - !Sub "wget ${rParamsCr.ChainSpecUrl} -O /parityVolume/chainspec.json"
                  - Fn::Join:
                    - " "
                    - - !Sub "docker run -d --network=host --mount type=bind,source=/parityVolume,target=/static -p 8545:8545 -p 8546:8546 -p 30303:30303 -p 30303:30303/udp parity/parity:stable"
                      - "--chain=/static/chainspec.json"
                      - "--logging=info"
                      - "--jsonrpc-apis=web3,net,eth"
                      - "--jsonrpc-interface=all"
                      - "--jsonrpc-cors=all"
                      - "--ws-apis=web3,net,eth"
                      - "--ws-interface=all"
                      - "--ws-origins=all"
                      - "--pruning=archive"
#                      - Fn::If:
#                          - EthStatsCondition
#                          - Fn::Join:
#                              - " "
#                              - - "--ethstats-ws-url"
#                                - "ws://localhost:80"
#                                - "--ethstats-ws-secret"
#                                - Ref: EthStatsSecret
#                          - ""
#                  - Fn::If:
#                      - EthStatsCondition
#                      - !Sub "docker run -d -p 80:80 -e \"WS_SECRET=${EthStatsSecret}\" -e \"PORT=80\" ${EthStatsDockerImage}"
#                      - ""
#                  - Fn::If:
#                      - EthExplorerCondition
#                      - !Sub "docker run -d -p 8080:8080 -e \"IS_LOCAL_GETH=true\" -e \"PORT=8080\" ${EthExplorerDockerImage}"
#                      - ""
                  - "docker run -d -p 5001:5001 -p 4001:4001 ipfs/go-ipfs"
            - "\n"
            - "res=$?"
            - "\n"
            - "echo $res"
            - "\n"
            - "/opt/aws/bin/cfn-signal -e $res "
            - "         --stack "
            - Ref: AWS::StackName
            - "         --resource rPublicNodeAutoScalingGroup "
            - "         --region "
            - Ref: AWS::Region
            - "\n"
            - "docker ps"
            - "\n"



  # EthereumCommonStack:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: !Sub "${NestedTemplateOrigin}ethereum-common.template.yaml"
  #     Parameters:
  #       VPCID:
  #         Ref: VPCID
  #       NetworkSubnetIDs:
  #         Fn::Join:
  #           - ","
  #           - Ref: NetworkSubnetIDs
  #       ALBSubnetIDs:
  #         Fn::Join:
  #           - ","
  #           - Ref: ALBSubnetIDs
  #       NumberOfEthereumClients:
  #         Ref: NumberOfEthereumClients
  #       NumberOfEthereumMiners:
  #         Ref: NumberOfEthereumMiners
  #       InitialAccountAddresses:
  #         Ref: InitialAccountAddresses
  #       NetworkID:
  #         Ref: NetworkID
  #       BlockGasLimit:
  #         Ref: BlockGasLimit
  #       InitialBlockGasLimit:
  #         Ref: InitialBlockGasLimit
  #       EC2InstanceProfileArn:
  #         Ref: EC2InstanceProfileArn
  #       EC2KeyPairName:
  #         Ref: EC2KeyPairName
  #       EC2SecurityGroup:
  #         Ref: EC2SecurityGroup
  #       ECSRoleForALB:
  #         Ref: ECSRoleForALB
  #       NumberOfEC2Instances:
  #         Ref: NumberOfEC2Instances
  #       EC2InstanceType:
  #         Ref: EC2InstanceType
  #       RootStackName:
  #         Ref: AWS::StackName
  #       MinerAccountAddress:
  #         Ref: MinerAccountAddress
  #       EthereumNodeLogLevel:
  #         Ref: EthereumNodeLogLevel
  #       RunEthExplorer:
  #         Ref: RunEthExplorer
  #       RunEthStats:
  #         Ref: RunEthStats
  #       EthStatsSecret:
  #         Ref: EthStatsSecret
  #       ContainerPlatform:
  #         Ref: ContainerPlatform
  #       InitialDifficulty:
  #         Ref: InitialDifficulty
  #       InitialAccountBalance:
  #         Ref: InitialAccountBalance
  #       GasPriceFloor:
  #         Ref: GasPriceFloor
  #       LoadBalancerSecurityGroup:
  #         Ref: LoadBalancerSecurityGroup
  #       ClusterName:
  #         Fn::Sub: "${AWS::StackName}-Ethereum"
  #       DockerRegion:
  #         Fn::FindInMap:
  #           - RegionToResourceRegion
  #           - Ref: AWS::Region
  #           - to
  #       DockerECRAccount:
  #         Fn::FindInMap:
  #           - RegionInformationMap
  #           - Fn::FindInMap:
  #             - RegionToResourceRegion
  #             - Ref: AWS::Region
  #             - to
  #           - ResourceAccountId
  #       EthereumDockerImage:
  #         Fn::Sub:
  #           - "${DockerECRAccount}.dkr.ecr.${DockerRegion}.amazonaws.com/client-go:v1"
  #           - DockerRegion:
  #               Fn::FindInMap:
  #                 - RegionToResourceRegion
  #                 - Ref: AWS::Region
  #                 - to
  #             DockerECRAccount:
  #               Fn::FindInMap:
  #                 - RegionInformationMap
  #                 - Fn::FindInMap:
  #                   - RegionToResourceRegion
  #                   - Ref: AWS::Region
  #                   - to
  #                 - ResourceAccountId
  #       EthStatsDockerImage:
  #         Fn::Sub:
  #           - "${DockerECRAccount}.dkr.ecr.${DockerRegion}.amazonaws.com/eth-netstats:v1"
  #           - DockerRegion:
  #               Fn::FindInMap:
  #                 - RegionToResourceRegion
  #                 - Ref: AWS::Region
  #                 - to
  #             DockerECRAccount:
  #               Fn::FindInMap:
  #                 - RegionInformationMap
  #                 - Fn::FindInMap:
  #                   - RegionToResourceRegion
  #                   - Ref: AWS::Region
  #                   - to
  #                 - ResourceAccountId
  #       EthExplorerDockerImage:
  #         Fn::Sub:
  #           - "${DockerECRAccount}.dkr.ecr.${DockerRegion}.amazonaws.com/eth-explorer:v1"
  #           - DockerRegion:
  #               Fn::FindInMap:
  #                 - RegionToResourceRegion
  #                 - Ref: AWS::Region
  #                 - to
  #             DockerECRAccount:
  #               Fn::FindInMap:
  #                 - RegionInformationMap
  #                 - Fn::FindInMap:
  #                   - RegionToResourceRegion
  #                   - Ref: AWS::Region
  #                   - to
  #                 - ResourceAccountId
  #       NestedTemplateOrigin: !Ref NestedTemplateOrigin

Outputs:
  oChainSpecUrl:
    Value: !GetAtt rParamsCr.ChainSpecUrl
  oChainSpec:
    Value: !GetAtt rParamsCr.ChainSpec
  oEthNetworkId:
    Value: !GetAtt rParamsCr.NetworkId
  oEc2KeyPairName:
    Value: !GetAtt rParamsCr.KeyPairName
#   EthStatsURL:
#     Description: "Visit this URL to see the status of your Ethereum nodes"
#     Value:
#       Fn::GetAtt: ["EthereumCommonStack", "Outputs.EthStatsURL"]
#   EthExplorerURL:
#     Description: "Visit this URL to view transactions on your Ethereum network"
#     Value:
#       Fn::GetAtt: ["EthereumCommonStack", "Outputs.EthExplorerURL"]
#   EthJsonRPCURL:
#     Description: "Use this URL to access the Geth JSON RPC of your Ethereum Clients, or input it into Metamask"
#     Value:
#       Fn::GetAtt: ["EthereumCommonStack", "Outputs.EthJsonRPCURL"]